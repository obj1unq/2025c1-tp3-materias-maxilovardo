import inscripcion.*
import carrera.*

describe "inscripciones" {
    var programacion
    var medicina
    var derecho
    
    var elementosDeProgramacion
    var matematica1
    var objetos1
    var objetos2
    var objetos3
    var trabajoFinal
    var basesDeDatos
    var programacionConcurrente
    var quimica
    var biologia1
    var biologia2
    var anatomiaGeneral
    var latin
    var derechoRomano
    var historiaDelDerechoArgentino
    var derechoPenal1
    var derechoPenal2

    var roque
    var luisa
    var romina
    var alicia
    var ana

    method inicialize(){
        programacion = new Carrera(materias = #{elementosDeProgramacion, matematica1, objetos1, objetos2, objetos3, trabajoFinal, basesDeDatos})
        medicina = new Carrera(materias = #{quimica, biologia1, biologia2, anatomiaGeneral})
        derecho = new Carrera(materias = #{latin, derechoRomano, historiaDelDerechoArgentino, derechoPenal1, derechoPenal2})

        elementosDeProgramacion = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        matematica1 = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        objetos1 = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        objetos2 = new Materia(requisitos = #{objetos1,matematica1},cupo=3,alumnos=#{},listaDeEspera=#{})
        objetos3 = new Materia(requisitos = #{objetos2,basesDeDatos},alumnos=#{},listaDeEspera=#{})
        trabajoFinal = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        basesDeDatos = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        programacionConcurrente = new Materia (requisitos = #{objetos1,basesDeDatos},alumnos=#{},listaDeEspera=#{})
        quimica = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        biologia1 = new Materia(requisitos = #{biologia1},alumnos=#{},listaDeEspera=#{})
        biologia2 = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        anatomiaGeneral = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        latin = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        derechoRomano = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        historiaDelDerechoArgentino = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        derechoPenal1 = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})
        derechoPenal2 = new Materia(requisitos = #{},alumnos=#{},listaDeEspera=#{})

        roque = new Estudiante(carreras = #{programacion, medicina}, aprobadas = #{elementosDeProgramacion, matematica1, objetos1, basesDeDatos, quimica, biologia1})
        luisa = new Estudiante(carreras = #{programacion}, aprobadas =#{elementosDeProgramacion, objetos1, matematica1})
        romina = new Estudiante(carreras = #{programacion}, aprobadas =#{elementosDeProgramacion, objetos1, matematica1})
        alicia = new Estudiante(carreras = #{programacion}, aprobadas =#{elementosDeProgramacion, objetos1, matematica1})
        ana = new Estudiante(carreras = #{programacion}, aprobadas =#{elementosDeProgramacion})
    }
    test "pueden inscribirse en" {
        assert.that(roque.puedeInscribir(objetos2))
        assert.notThat(roque.puedeInscribir(objetos3))
        assert.notThat(roque.puedeInscribir(objetos1))
        assert.that(roque.puedeInscribir(programacionConcurrente))
        assert.that(roque.puedeInscribir(biologia2))
    }

    test "orden de inscripcion" {
        objetos2.inscribir(luisa)
        objetos2.inscribir(romina)
        objetos2.inscribir(alicia)
        objetos2.inscribir(roque)
        assert.equals(#{luisa,romina,alicia}, objetos2.alumnos())
        assert.equals(#{roque}, objetos2.listaDeEspera())
        romina.darDebaja(objetos2)
        assert.equals(#{luisa,alicia,roque}, objetos2.alumnos())
    }
}